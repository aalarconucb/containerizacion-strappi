apiVersion: apps/v1
kind: Deployment
metadata:
  name: strapi
  namespace: app
spec:
  replicas: 1
  selector: { matchLabels: { app: strapi } }
  template:
    metadata: { labels: { app: strapi } }
    spec:
      containers:
        - name: strapi
          image: alvaro/strapi:v1
          env:
            - name: NODE_ENV
              value: "production"
            - name: HOST
              value: "0.0.0.0"
            - name: PORT
              value: "1337"
            - name: DATABASE_CLIENT
              value: "postgres"
            - name: DATABASE_HOST
              value: "postgres"
            - name: DATABASE_PORT
              value: "5432"
            - name: DATABASE_NAME
              valueFrom: { secretKeyRef: { name: app-secrets, key: POSTGRES_DB } }
            - name: DATABASE_USERNAME
              valueFrom: { secretKeyRef: { name: app-secrets, key: POSTGRES_USER } }
            - name: DATABASE_PASSWORD
              valueFrom: { secretKeyRef: { name: app-secrets, key: POSTGRES_PASSWORD } }
            - name: APP_KEYS
              valueFrom: { secretKeyRef: { name: app-secrets, key: APP_KEYS } }
            - name: API_TOKEN_SALT
              valueFrom: { secretKeyRef: { name: app-secrets, key: API_TOKEN_SALT } }
            - name: ADMIN_JWT_SECRET
              valueFrom: { secretKeyRef: { name: app-secrets, key: ADMIN_JWT_SECRET } }
            - name: JWT_SECRET
              valueFrom: { secretKeyRef: { name: app-secrets, key: JWT_SECRET } }
            - name: REDIS_HOST
              value: "redis"
            - name: REDIS_PORT
              value: "6379"
          ports: [{ containerPort: 1337, name: http }]
          volumeMounts:
            - name: uploads
              mountPath: /srv/app/public/uploads
      volumes:
        - name: uploads
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: strapi
  namespace: app
spec:
  selector: { app: strapi }
  ports: [{ port: 1337, targetPort: 1337 }]
  type: ClusterIP
